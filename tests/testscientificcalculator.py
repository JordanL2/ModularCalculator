#!/usr/bin/python3

from testrunner import *
from modularcalculator.modularcalculator import *
from modularcalculator.services.syntaxhighlighter import *
from modularcalculator.objects.exceptions import *
from modularcalculator.objects.number import *
from modularcalculator.objects.units import *


class TestScientificCalculator(CalculatorTestCase):

    c = ModularCalculator('Scientific')
    tests = [
        { 'test': 'min([1, 2, 3])', 'expected': Number('1') },
        { 'test': '1 + (( min([ 2, -1,  3 ])))', 'expected': Number('0') },
        { 'test': '( min([ min([4,5,6]), min([2,8,9]),  min([3,7,8]) ]))', 'expected': Number('2') },
        { 'test': '( min([ min([4,5,6]), min([2,8,9])+1,  min([3,7,8]) ]))', 'expected': Number('3') },
        { 'test': '( min([ min([4,5,6]), 2 * min([2,8,9]) - 3,  min([3,7,8]) ]))', 'expected': Number('1') },
        { 'test': '( min([ min([4,5,6]), 2 * min([2,8,9])-3,  min([3,7,8]) ]))', 'expected': Number('1') },
        { 'test': '(min([min([4,5,6]),((2 * min([2,8,9])-(3 + 1))),min([3,7,8]) ]))', 'expected': Number('0') },

        { 'test': r"abs(-4)", 'expected': Number('4') },
        { 'test': r"fact(5)", 'expected': Number('120') },
        { 'test': r"log(5)", 'expected': Number('1.609437912434100374600759333226187639525601354268517721912647891474178987707657764630133878093179611') },
        { 'test': r"log(5, 10)", 'expected': Number('0.6989700043360188047862611052755069732318101185378914586895725388728918107255754905130727478818138281') },
        { 'test': r"log(1.5, 2.5)", 'expected': Number('4425070493497599327014292680916407655627227037413818231546927105877211294771800184434107969520952601', '10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') },

        { 'test': r"sin(1)", 'expected': Number(3789648413623927, 4503599627370496) },
        { 'test': r"cos(1)", 'expected': Number(1216652631687587, 2251799813685248) },
        { 'test': r"tan(1)", 'expected': Number(3506970424209875, 2251799813685248) },
        { 'test': r"sinh(1)", 'expected': Number(2646317828889793, 2251799813685248) },
        { 'test': r"cosh(1)", 'expected': Number(434338585747285, 281474976710656) },
        { 'test': r"tanh(1)", 'expected': Number(1714957578484965, 2251799813685248) },
        { 'test': r"asin(1)", 'expected': Number(884279719003555, 562949953421312) },
        { 'test': r"acos(1)", 'expected': Number(0) },
        { 'test': r"atan(1)", 'expected': Number(884279719003555, 1125899906842624) },
        { 'test': r"asinh(1)", 'expected': Number(7938707516150823, 9007199254740992) },
        { 'test': r"acosh(1)", 'expected': Number(0) },
        { 'test': r"atanh(0)", 'expected': Number(0) },

        { 'test': r"max([3, 5, 7])", 'expected': Number('7') },
        { 'test': r"mean([2, 3, 5, 6])", 'expected': Number('4') },
        { 'test': r"median([6, 1, 9])", 'expected': Number('6') },
        { 'test': r"mode([1, 1, 2, 4])", 'expected': Number('1') },
        { 'test': r"stdev([1, 2, 3, 4])", 'expected': Number(645497224367902814196544233297066601805486950881931804431262294352247181989496505586547896143112253, 500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) },
        { 'test': r"sum([1, 2, 3, 4])", 'expected': Number('10') },
        { 'test': r"sum(([10]))", 'expected': Number('10') },
        { 'test': r"sum([(10)])", 'expected': Number('10') },
        { 'test': r"sum([(1), 2, 3])", 'expected': Number('6') },
        { 'test': r"sum(([(1), 2, 3]))", 'expected': Number('6') },
        { 'test': r"sum([1, (2), 3])", 'expected': Number('6') },
        { 'test': r"sum([1, 2, (3)])", 'expected': Number('6') },
        { 'test': r"sum([1, 2, (3) + 2])", 'expected': Number('8') },
        { 'test': r"sum([(1), 2, 3 + 2])", 'expected': Number('8') },
        { 'test': r"sum([ (10) ])", 'expected': Number('10') },
        { 'test': r"sum( [ (10) ] )", 'expected': Number('10') },
        { 'test': r"sum([( 10 )])", 'expected': Number('10') },
        { 'test': r"sum( [( 10 )] )", 'expected': Number('10') },

        { 'test': r"floor(1.4)", 'expected': Number('1') },
        { 'test': r"floor(1.5)", 'expected': Number('1') },
        { 'test': r"floor(1.599, 1)", 'expected': Number('1.5') },
        { 'test': r"floor(1.599, 2)", 'expected': Number('1.59') },
        { 'test': r"ceil(1.4)", 'expected': Number('2') },
        { 'test': r"ceil(1.5)", 'expected': Number('2') },
        { 'test': r"ceil(1.234, 1)", 'expected': Number('1.3') },
        { 'test': r"ceil(1.234, 2)", 'expected': Number('1.24') },
        { 'test': r"round(1.1)", 'expected': Number('1') },
        { 'test': r"round(1.5)", 'expected': Number('2') },
        { 'test': r"round(1.11, 1)", 'expected': Number('1.1') },
        { 'test': r"round(1.16, 1)", 'expected': Number('1.2') },
        { 'test': r"lcm(4, 5)", 'expected': Number('20') },
        { 'test': r"gcd(54, 60)", 'expected': Number('6') },

        { 'test': r"dec(1.234e1)", 'expected': Number('12.34') },
        { 'test': r"dec(1.234e10)", 'expected': Number('12340000000') },
        { 'test': r"dec(1.234e2)", 'expected': Number('123.4') },
        { 'test': r"dec(1.234e0)", 'expected': Number('1.234') },
        { 'test': r"dec(1.234e-1)", 'expected': Number('0.1234') },
        { 'test': r"dec(1.234e-2)", 'expected': Number('0.01234') },
        { 'test': r"dec(5.97237e24 kg)", 'expected': (Number('5972370000000000000000000'), 'kilograms') },
        { 'test': r"1.23e2 + 1.2e1", 'cast': str, 'expected': '1.35E2' },
        { 'test': r"1.23e2kg + 1.2e1kg", 'cast': str, 'expected': ('1.35E2', 'kilograms') },
        { 'test': r"dec(1.23e2 + 1.2e1)", 'expected': Number('135') },
        { 'test': r"10E0 * 1", 'cast': str, 'expected': '1E1' },
        { 'test': r"0E0", 'cast': str, 'expected': '0E0' },
        { 'test': r"0E0 * 1", 'cast': str, 'expected': '0E0' },
        { 'test': r"1E9 * 1", 'cast': str, 'expected': '1E9' },
        { 'test': r"1 * 1E9", 'expected': Number('1000000000') },
        { 'test': r"dec(1E9)", 'expected': Number('1000000000') },
        { 'test': r"dec(1E9)", 'cast': str, 'expected': '1000000000' },
        { 'test': r"1E9 m", 'cast': str, 'expected': ('1E9', 'meters') },
        { 'test': r"dec(1E9 m)", 'expected': (Number('1000000000'), 'meters') },
        { 'test': r"dec(1E9) m", 'expected': (Number('1000000000'), 'meters') },
        { 'test': r"2e0 / 3", 'cast': str, 'expected': '6.666666666666666666666666666667E-1' },

        { 'test': r"scientific(123.456789)", 'cast': str,  'expected': '1.23456789E2' },
        { 'test': r"scientific(123.45678900000)", 'cast': str,  'expected': '1.23456789E2' },
        { 'test': r"scientific(12345678900000)", 'cast': str,  'expected': '1.23456789E13' },
        { 'test': r"scientific(123.456789, 3)", 'cast': str,  'expected': '1.235E2' },
        { 'test': r"scientific(123.456789, 5)", 'cast': str,  'expected': '1.23457E2' },
        { 'test': r"scientific(0.000123456789, 5)", 'cast': str,  'expected': '1.23457E-4' },
        { 'test': r"scientific(123.456789 miles)", 'cast': str,  'expected': ('1.23456789E2', 'miles') },
        { 'test': r"scientific(123.4) * 2", 'cast': str,  'expected': '2.468E2' },

        { 'test': r"100%", 'expected': Number('1') },
        { 'test': r"200% * 4", 'expected': Number('8') },
        { 'test': r"200% * 4", 'cast': str, 'expected': '800%' },
        { 'test': r"51.23%", 'expected': Number('0.5123') },
        { 'test': r"round(51.23%)", 'expected': Number('0.51') },
        { 'test': r"round(51.23%, 1)", 'expected': Number('0.512') },
        { 'test': r"ceil(51.23%, 1)", 'expected': Number('0.513') },
        { 'test': r"floor(51.29%, 1)", 'expected': Number('0.512') },

        { 'test': r"3 meters to feet", 'expected': (Number(1250, 127), 'feet') },
        { 'test': r"3.5 meters to feet", 'expected': (Number(4375, 381), 'feet') },
        { 'test': r"0.035 meters to feet", 'expected': (Number(175, 1524), 'feet') },
        { 'test': r"-0.035 meters to feet", 'expected': (Number(-175, 1524), 'feet') },
        { 'test': r"3.5 feet to meters", 'expected': (Number('1.0668'), 'meters') },
        { 'test': r"35000000 feet to meters", 'expected': (Number('10668000'), 'meters') },
        { 'test': r"-200 °C to K", 'expected': (Number('73.15'), 'kelvin') },
        { 'test': r"20 °C to °F", 'expected': (Number('68'), 'Fahrenheit') },
        { 'test': r"20000 °C to °F", 'expected': (Number('36032'), 'Fahrenheit') },
        { 'test': r"68 °F to °C", 'expected': (Number('20'), 'Celsius') },

        { 'test': r"123 meters", 'expected': (Number('123'), 'meters') },
        { 'test': r"1 meters + 2 meters", 'expected': (Number('3'), 'meters') },
        { 'test': r"1 meters * 2", 'expected': (Number('2'), 'meters') },
        { 'test': r"6 meters / 2", 'expected': (Number('3'), 'meters') },
        { 'test': r"1 metre", 'expected': (Number('1'), 'meter') },
        { 'test': r"1 meter + 23 cm", 'expected': (Number('1.23'), 'meters') },
        { 'test': r"1 meter + 23 µm", 'expected': (Number('1.000023'), 'meters') },
        { 'test': r"1 meter + 23 nm", 'expected': (Number('1.000000023'), 'meters') },
        { 'test': r"1K + 1K", 'expected': (Number('2'), 'kelvin') },
        { 'test': r"1°C + 1°C", 'expected': (Number('2'), 'Celsius') },
        { 'test': r"1K + 1°C", 'expected': (Number('2'), 'kelvin') },
        { 'test': r"1°C + 1K", 'expected': (Number('2'), 'Celsius') },

        { 'test': r"meters * meters", 'expected': UnitPowerList([UnitPower(c.unit_normaliser.get_unit('metre'), Number(2))]) },
        { 'test': r"2 meters * 3 meters", 'expected': (Number('6'), 'meters^2') },
        { 'test': r"20 meters / 5 meters", 'expected': Number('4') },
        { 'test': r"20 meters \ 5 meters", 'expected': Number('4') },
        { 'test': r"12 meters * 3°C", 'expected': (Number('36'), 'meter Celsius') },
        { 'test': r"2 meters * 3 meters * 4 meters", 'expected': (Number('24'), 'meters^3') },
        { 'test': r"(2 meters * 3 meters * 4 meters) / 2 meters", 'expected': (Number('12'), 'meters^2') },
        { 'test': r"(2 meters * 3 meters * 4 meters) / (2 meters * 4 meters)", 'expected': (Number('3'), 'meters') },
        { 'test': r"(2 meters * 3 meters) / 2 feet", 'expected': (Number(1250, 127), 'meters') },
        { 'test': r"(2 meters * 3 meters * 4 meters) / (5 feet * 6 feet)", 'expected': (Number(1250000, 145161), 'meters') },
        { 'test': r"2 m/s", 'expected': (Number('2'), 'meters/second') },
        { 'test': r"2 m/s + 3 m/s", 'expected': (Number('5'), 'meters/second') },
        { 'test': r"2 m/s + 3 miles/hour", 'expected': (Number('3.34112'), 'meters/second') },
        { 'test': r"2 m/s to miles/hour", 'expected': (Number(6250, 1397), 'miles/hour') },
        { 'test': r"2 m^2", 'expected': (Number('2'), 'meters^2') },
        { 'test': r"2 m^3", 'expected': (Number('2'), 'meters^3') },
        { 'test': r"2 m^2 to feet^2", 'expected': (Number(3125000, 145161), 'feet^2') },

        { 'test': r"40 * (meters*meters) / (seconds*seconds) * 2 meters", 'expected': (Number('80'), 'meters^3/second^2') },
        { 'test': r"12 meters °C / s", 'expected': (Number('12'), 'meter Celsius/second') },
        { 'test': r"0.625 meters/(second^2 celsius) * 4°C", 'expected': (Number('2.5'), 'meters/second^2') },
        { 'test': r"40 TW h / yr", 'expected': (Number('40'), 'terawatt hours/year') },
        { 'test': r"compact(40 TW h / yr)", 'expected': (Number(2000000, 438291), 'gigawatts') },
        { 'test': r"0.004563084645220168834131873146 TW to TW h / yr", 'expected': (Number(999979466119096509240246406516743, 25000000000000000000000000000000), 'terawatt hours/year') },
        { 'test': r"40 TW h / yr to MW", 'expected': (Number(2000000000, 438291), 'megawatts') },
        { 'test': r"40 TW h / yr to W", 'expected': (Number(2000000000000000, 438291), 'watts') },

        { 'test': r"1 kW to J/s", 'expected': (Number('1000'), 'joules/second') },
        { 'test': r"kW to J/s", 'expected': (Number('1000'), 'joules/second') },
        { 'test': r"1 meters^3 to l", 'expected': (Number('1000'), 'liters') },
        { 'test': r"1 kW + 23 J/s", 'expected': (Number('1.023'), 'kilowatts') },
        { 'test': r"1 J/h + 2 kW", 'expected': (Number('7200001'), 'joules/hour') },
        { 'test': r"1l / 10cm^2", 'expected': (Number('1'), 'meter') },
        { 'test': r"1 km J/h + 2 m kW", 'expected': (Number('7201'), 'kilometer joules/hour') },
        { 'test': r"1 km W + 2 m W", 'expected': (Number('1.002'), 'kilometer watts') },
        { 'test': r"1 kW / (100 J/s)", 'expected': Number('10') },
        { 'test': r"10 W s + 23 J", 'expected': (Number('33'), 'watt seconds') },
        { 'test': r"100J / 2W", 'expected': (Number('50'), 'seconds') },
        { 'test': r"(100 W h) / (10 J/s)", 'expected': (Number('10'), 'hours') },
        { 'test': r"1000000 liters / 1 hectare", 'expected': (Number('10'), 'centimeters') },
        { 'test': r"1 hectare * 1 cm", 'expected': (Number('100000'), 'liters') },
        { 'test': r"10 W s / 2J", 'expected': Number('5') },
        { 'test': r"100 mi / 2 knots", 'expected': (Number(100584, 2315), 'hours') },
        { 'test': r"100 nmi / 2 knots", 'expected': (Number('50'), 'hours') },
        { 'test': r"0 nmi / 2 knots", 'expected': (Number('0'), 'hours') },
        { 'test': r"(100 mi) / (2 mi/h)", 'expected': (Number('50'), 'hours') },
        { 'test': r"1 UK pint + 2 UK pints", 'expected': (Number('3'), 'UK pints') },
        { 'test': r"1 liter + 2 UK pints", 'expected': (Number('2.1365225'), 'liters') },
        { 'test': r"1N + 2kg m/s/s", 'expected': (Number('3'), 'newtons') },
        { 'test': r"2 gee * 10 s", 'expected': (Number('196.133'), 'meters/second') },
        { 'test': r"10W to kg m^2 s^-3", 'expected': (Number('10'), 'kilogram meters^2/second^3') },
        { 'test': r"10 kg m^2/s^3 to J/s", 'expected': (Number('10'), 'joules/second') },
        { 'test': r"10 kg m^2/s^3", 'expected': (Number('10'), 'kilogram meters^2/second^3') },
        { 'test': r"20 kg m^2 / 2s^3", 'expected': (Number('10'), 'watts') },
        { 'test': r"10 kg m^2/s^3/W^2", 'expected': (Number('10'), 'kilogram meters^2/(second^3 watt^2)') },

        { 'test': r"1 kW / 100 J/s", 'expected': Number('10') },
        { 'test': r"1 GRAM to kg", 'expected': (Number('0.001'), 'kilograms') },
        { 'test': r"(2kg)^1", 'expected': (Number('2'), 'kilograms') },
        { 'test': r"(2kg)^0", 'expected': Number('1') },
        { 'test': r"3m s^-1", 'expected': (Number('3'), 'meters/second') },
        { 'test': r"3m s^-2", 'expected': (Number('3'), 'meters/second^2') },
        { 'test': r"(4s^2)^0.5", 'expected': (Number('2'), 'seconds') },
        { 'test': r"(27s^3)^(1/3)", 'expected': (Number('3'), 'seconds') },
        { 'test': r"3 / 2s", 'expected': (Number('1.5'), 'hertz') },

        { 'test': r"min([1kg, 2g])", 'expected': (Number('2'), 'grams') },
        { 'test': r"mean([1g, 2kg])", 'expected': (Number('1000.5'), 'grams') },
        { 'test': r"min([2W, 1.5J/s])", 'expected': (Number('1.5'), 'joules/second') },
        { 'test': r"min([1kg, 2kg, 500g])", 'expected': (Number('500'), 'grams') },

        { 'test': r"5 kg m/s^2", 'expected': (Number('5'), 'kilogram meters/second^2') },
        { 'test': r"25 kg m / 5 s^2", 'expected': (Number('5'), 'newtons') },
        { 'test': r"5 (°C/kg/m)*s^2", 'expected': (Number('5'), 'Celsius/newton') },
        { 'test': r"1 m^2/s", 'expected': (Number('1'), 'meter^2/second') },
        { 'test': r"100m/s^2 / (1kN/ 1000000kg)", 'expected': Number('100000') },

        { 'test': r"10N / 5kg", 'expected': (Number('2'), 'meters/second^2') },

        { 'test': r"80 mi/UK gallon", 'expected': (Number('80'), 'miles/UK gallon') },
        { 'test': r"1 / (80 mi/UK gallon)", 'expected': (Number('0.0125'), 'UK gallons/mile') },
        { 'test': r"1 / (80 mi/UK gallon) * 100 miles", 'expected': (Number('1.25'), 'UK gallons') },
        { 'test': r"10km/l", 'expected': (Number('10'), 'kilometers/liter') },
        { 'test': r"10kg^20", 'expected': (Number('10'), 'kilograms^20') },

        { 'test': r"6 / 2s", 'expected': (Number('3'), 'hertz') },
        { 'test': r"6 / (2s^2)", 'expected': (Number('3'), 'hertz^2') },
        { 'test': r"6 / (2s^5)", 'expected': (Number('3'), 'hertz^5') },
        { 'test': r"6 / 2Hz", 'expected': (Number('3'), 'seconds') },
        { 'test': r"6 / 2s to Bq", 'expected': (Number('3'), 'becquerels') },
        { 'test': r"2 cd * 3 sr", 'expected': (Number('6'), 'lumens') },
        { 'test': r"2 cd * 3 sr / 4 m^2", 'expected': (Number('1.5'), 'lux') },
        { 'test': r"4 lux * 2 m^2", 'expected': (Number('8'), 'lumens') },
        { 'test': r"4 lm / 2 sr", 'expected': (Number('2'), 'candelas') },
        { 'test': r"10J / 2 kg to Gy", 'expected': (Number('5'), 'grays') },
        { 'test': r"10J / 2 kg to Sv", 'expected': (Number('5'), 'sieverts') },
        { 'test': r"10 mol / 2 s", 'expected': (Number('5'), 'katals') },

        { 'test': r"10A * 3s", 'expected': (Number('30'), 'coulombs') },
        { 'test': r"20W / 4A", 'expected': (Number('5'), 'volts') },
        { 'test': r"20C / 4V", 'expected': (Number('5'), 'farads') },
        { 'test': r"20V / 4A", 'expected': (Number('5'), 'ohms') },
        { 'test': r"1 / 2 ohms", 'expected': (Number('0.5'), 'siemens') },
        { 'test': r"1 / 2 siemens", 'expected': (Number('0.5'), 'ohms') },
        { 'test': r"6V * 2s", 'expected': (Number('12'), 'webers') },
        { 'test': r"8 Wb / 2 m^2", 'expected': (Number('4'), 'teslas') },
        { 'test': r"8 Wb / 2 A", 'expected': (Number('4'), 'henries') },

        { 'test': r"1 / 10s", 'expected': (Number('100'), 'millihertz') },
        { 'test': "a = 1 / 10s\na", 'expected': (Number('100'), 'millihertz') },

        { 'test': r"0.002092531754169369520182468769 seconds^-1 * 0", 'expected': (Number('0'), 'hertz') },

        { 'test': r"1 pint to ml", 'expected': (Number('473.176473'), 'milliliters') },

        { 'test': "tank = 17100\nthruster = 0.486/s\nformat((tank / (3 thruster)))", 'expected': '3 hours, 15 minutes, 28.395061728395061728395061728395 seconds' },

        { 'test': "x = 2 T m^2\nx", 'expected': (Number('2'), 'tesla meters^2') },
        { 'test': r"1m/s + 2", 'expected_exception': {
                                                'exception': ExecutionException,
                                                'message': r"Could not execute operator + with operands: 'Number(1) meters^1, seconds^-1', 'Number(2)' - From unit is not set" } },
        { 'test': """R = 8.31446261815324 J / (Kelvin * moles)
                     volume = 1m^3
                     critical_temp = 33.2K
                     critical_pressure = 1290000 Pa
                     mass = 1kg
                     molar_mass = 0.00100794*2 kg/mol
                     n = (mass / molar_mass)
                     a = (27/64) * (R^2 * critical_temp^2 / critical_pressure)
                     a * n^2 / volume^2""",
             'cast': str,
             'expected': ('6.132100516412516904893858164421', 'kilopascals') },
        { 'test': "(0.001m^3) ^ (7/5)", 'cast': str, 'expected': ('0.000063095734448019324943436014', 'meters^4.2') },
        { 'test': "1g^0.5 * 1kg^0.5", 'cast': str, 'expected': ('31.622776601683793319988935444327', 'grams') },
        { 'test': "2g^1.5 * 4kg^1.5", 'cast': str, 'expected': ('252982.212813470346559911483554617483', 'grams^3') },

        { 'test': r"format(1 hour + 23 minutes + 45 seconds)", 'expected': '1 hour, 23 minutes, 45 seconds' },
        { 'test': r"format(61s)", 'expected': '1 minute, 1 second' },
        { 'test': r"format(2 weeks + 3 hour + 23 minutes + 45 seconds)", 'expected': '14 days, 3 hours, 23 minutes, 45 seconds' },
        { 'test': r"format(1 hour + 23 minutes + 0.001 seconds)", 'expected': '1 hour, 23 minutes, 1 millisecond' },
        { 'test': r"format(456765.34533646 s)", 'expected': '5 days, 6 hours, 52 minutes, 45.34533646 seconds' },
        { 'test': r"format(456765.34533646 s, si)", 'expected': '456765.34533646 seconds' },
        { 'test': r"format(456765.34533646 minutes, si)", 'expected': '27405920.7201876 seconds' },
        { 'test': r"format(456765000.34533646 ms, gregorian)", 'expected': '5 days, 6 hours, 52 minutes, 45.00034533646 seconds' },
        { 'test': r"format(0.000000046 ms)", 'expected': '46 picoseconds' },
        { 'test': r"format(1.000000001 ms)", 'expected': '1.000000001 milliseconds' },
        { 'test': r"format(0.001000000001 ms)", 'expected': '1.000000001 microseconds' },
        { 'test': r"format(1000000001 ms, si)", 'expected': '1000000.001 seconds' },
        { 'test': r"format(1000000000 ms, si)", 'expected': '1000000 seconds' },
        { 'test': r"format(1000000000 ms)", 'expected': '11 days, 13 hours, 46 minutes, 40 seconds' },
        { 'test': r"format(456765.345336 ms, si)", 'expected': '456.765345336 seconds' },
        { 'test': r"format(1.543 miles)", 'expected': '1 mile, 955 yards, 2 feet, 0.48 inches' },
        { 'test': r"format(1.543 long tons)", 'expected': '1 long ton, 86 stone, 12 pounds, 5 ounces, 52.5 grains' },
        { 'test': r"format(1.543 short tons)", 'expected': '1 short ton, 1086 pounds' },
        { 'test': r"format(1.54467 short tons)", 'expected': '1 short ton, 1089 pounds, 5 ounces, 192.5 grains' },
        { 'test': r"format(1.543 tons)", 'expected': '1 short ton, 1086 pounds' },
        { 'test': r"format(12345.6789kg)", 'expected': '12 tonnes, 345.6789 kilograms' },
        { 'test': r"format(1234 MB)", 'expected': '1.234 gigabytes' },
        { 'test': r"format(1234000000 bytes)", 'expected': '1.234 gigabytes' },
        { 'test': r"format(1234005000 bytes)", 'expected': '1.234005 gigabytes' },

        { 'test': r"round(2.567s, 2)", 'expected': (Number('2.57'), 'seconds') },

        { 'test': "x = 1\nreset()\nx", 'expected': None },

        { 'test': r"[1, 2, 3]", 'expected': [Number('1'), Number('2'), Number('3')] },
        { 'test': r"[1 .. 3]", 'expected': [Number('1'), Number('2'), Number('3')] },
        { 'test': r"[-3 .. -1]", 'expected': [Number('-3'), Number('-2'), Number('-1')] },
        { 'test': r"[-1 .. -3 step -1]", 'expected': [Number('-1'), Number('-2'), Number('-3')] },
        { 'test': r"[3 .. 1]", 'expected': [Number('3'), Number('2'), Number('1')] },
        { 'test': r"[3 .. 1 step -1]", 'expected': [Number('3'), Number('2'), Number('1')] },
        { 'test': r"[-1 .. -3]", 'expected': [Number('-1'), Number('-2'), Number('-3')] },
        { 'test': r"[1.5 .. 3.5]", 'expected': [Number('1.5'), Number('2.5'), Number('3.5')] },
        { 'test': r"[1.5 .. 3.5 step 0.5]", 'expected': [Number('1.5'), Number('2'), Number('2.5'), Number('3'), Number('3.5')] },
        { 'test': r"[1 .. 4, 9, 14 .. 20 step 2]", 'expected': [Number('1'), Number('2'), Number('3'), Number('4'), Number('9'), Number('14'), Number('16'), Number('18'), Number('20')] },
        { 'test': r"[1 cm, 2 seconds, 3]", 'expected': [(Number('1') , 'centimeter'), (Number('2'), 'seconds'), Number('3')] },

        { 'test': "a = [1, 2, 3]\na", 'expected': [Number('1'), Number('2'), Number('3')] },
        { 'test': "a = [1, 2, 3]\na = [1, 2, 3]\na", 'expected': [Number('1'), Number('2'), Number('3')] },
        { 'test': r"[1, 2, 3] + 4", 'expected': [Number('5'), Number('6'), Number('7')] },
        { 'test': r"abs([-5, 2 * 3, -3 - 4])", 'expected': [Number('5'), Number('6'), Number('7')] },

        { 'test': r"mean([1, 2, 6])", 'expected': Number('3') },
        { 'test': r"mean([1 .. 100])", 'expected': Number('50.5') },
        { 'test': "a=[1 .. 100]\nmean(a)", 'expected': Number('50.5') },
        { 'test': "a=[1cm, 3 feet]", 'expected': [(Number('1'), 'centimeter'), (Number('3'), 'feet')] },
        { 'test': "a=[1cm, 3 feet]\nmean(a)\na", 'expected': [(Number('1'), 'centimeter'), (Number('3'), 'feet')] },

        { 'test': r"[20 cm .. 1 meter step 20 cm]", 'expected': [(Number('20') , 'centimeters'), (Number('40') , 'centimeters'), (Number('60') , 'centimeters'), (Number('80') , 'centimeters'), (Number('100') , 'centimeters')] },

        { 'test': r"concat([1, 2, 3], [4, 5])", 'expected': [Number('1'), Number('2'), Number('3'), Number('4'), Number('5')] },
        { 'test': r"element([1, 2, 3], 2)", 'expected': Number('2') },
        { 'test': r"element([1, 2, 3, 4, 5], [2 .. 4])", 'expected': [Number('2'), Number('3'), Number('4')] },
        { 'test': r"element([1 cm, 2 seconds, 3 metres], 2)", 'expected': (Number('2'), 'seconds') },
        { 'test': r"count([2 .. 6 step 2])", 'expected': Number('3') },
        { 'test': r"sort([4, 2, 3, 1])", 'expected': [Number('1'), Number('2'), Number('3'), Number('4')] },
        { 'test': r"sort([4 cm, 2 meters, 3 feet])", 'expected': [(Number('4'), 'centimeters'), (Number('3'), 'feet'), (Number('2'), 'meters')] },
        { 'test': r"reverse([4, 2, 3, 1])", 'expected': [Number('1'), Number('3'), Number('2'), Number('4')] },
        { 'test': r"min([1 metre, 40 cm])", 'expected': (Number('40'), 'centimeters') },
        { 'test': r"max([40 cm, 1 metre])", 'expected': (Number('1'), 'meter') },

        { 'test': r"min([0, 3, 6], [4, 2, 5])", 'expected': [Number('0'), Number('2'), Number('5')] },
        { 'test': r"min(3, [4, 2, 5])", 'expected': [Number('3'), Number('2'), Number('3')] },
        { 'test': r"min([0, 3, 6], 4)", 'expected': [Number('0'), Number('3'), Number('4')] },
        { 'test': r"min([0, 3, 6], [1, 2, 3], [6, 4, 1])", 'expected': [Number('0'), Number('2'), Number('1')] },
        { 'test': r"min(5, 2, 3, 1, 4)", 'expected': Number('1') },
        { 'test': r"sort(5, 2, 3, 1, 4)", 'expected': [Number('1'), Number('2'), Number('3'), Number('4'), Number('5')] },

        { 'test': r"[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", 'expected': [[Number('1'), Number('2'), Number('3')], [Number('4'), Number('5'), Number('6')], [Number('7'), Number('8'), Number('9')]] },
        { 'test': r"[[1, 2, 3], [4, 5, 6], [7, 8, 9]] + 10", 'expected': [[Number('11'), Number('12'), Number('13')], [Number('14'), Number('15'), Number('16')], [Number('17'), Number('18'), Number('19')]] },
        { 'test': "a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nb = a + 1\nb - a", 'expected': [[Number('1'), Number('1'), Number('1')], [Number('1'), Number('1'), Number('1')], [Number('1'), Number('1'), Number('1')]] },
        { 'test': "[[1, 2, 3], [4, 5, 6], [7, 8, 9]] * [10, 100, 1000]", 'expected': [[Number('10'), Number('20'), Number('30')], [Number('400'), Number('500'), Number('600')], [Number('7000'), Number('8000'), Number('9000')]] },
        { 'test': "a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nelement(a, 1)", 'expected': [Number('1'), Number('2'), Number('3')] },
        { 'test': "a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nelement(element(a, 1), 3)", 'expected': Number('3') },
        { 'test': "a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nelement(a, [1, 3])", 'expected': [[Number('1'), Number('2'), Number('3')], [Number('7'), Number('8'), Number('9')]] },
        { 'test': r"[[1, 2],[4, 5]] meters", 'expected': [[(Number('1'), 'meter'), (Number('2'), 'meters')], [(Number('4'), 'meters'), (Number('5'), 'meters')]] },
        { 'test': r"[[1 meter, 2 seconds],[4 joules, 5 N]]", 'expected': [[(Number('1'), 'meter'), (Number('2'), 'seconds')], [(Number('4'), 'joules'), (Number('5'), 'newtons')]] },
        { 'test': r"[[1..2] meters, [2..4] s]", 'expected': [[(Number('1'), 'meter'), (Number('2'), 'meters')], [(Number('2'), 'seconds'), (Number('3'), 'seconds'), (Number('4'), 'seconds')]] },
        { 'test': r"[[1..2] meters, [2, 4] s] + [[4..5] meters, [3, 4] s]", 'expected': [[(Number('5'), 'meters'), (Number('7'), 'meters')], [(Number('5'), 'seconds'), (Number('8'), 'seconds')]] },

        { 'test': r"day_usage = 1", 'expected': Number('1') },

        { 'test': r"tau / 2 pi", 'expected': Number('1') },

        { 'test': r"sp_airy_ai(1)", 'expected': Number(609302875692747, 4503599627370496) },
        { 'test': r"sp_airy_aip(0)", 'expected': Number(-4662475881910155, 18014398509481984) },
        { 'test': r"sp_airy_bi(-1)", 'expected': Number(3746900836687555, 36028797018963968) },
        { 'test': r"sp_airy_bip(0)", 'expected': Number(8075645116532897, 18014398509481984) },
        { 'test': r"sp_airye_eai(0.5)", 'expected': Number(5283211618295633, 18014398509481984) },
        { 'test': r"sp_airye_eaip(0)", 'expected': Number(-4662475881910155, 18014398509481984) },
        { 'test': r"sp_airye_ebi(0.5)", 'expected': Number(6078890422431057, 9007199254740992) },
        { 'test': r"sp_airye_ebip(-1)", 'expected': Number(5335645300842103, 9007199254740992) },
        { 'test': r"sp_itairy_apt(0.5)", 'expected': Number(328657625373571, 2251799813685248) },
        { 'test': r"sp_itairy_bpt(0)", 'expected': Number(0) },
        { 'test': r"sp_itairy_ant(0.5)", 'expected': Number(3761578406806851, 18014398509481984) },
        { 'test': r"sp_itairy_bnt(1)", 'expected': Number(6719460474640989, 18014398509481984) },
        { 'test': r"sp_ellipj_sn(-1, 1)", 'expected': Number(-1714957578484965, 2251799813685248) },
        { 'test': r"sp_ellipj_cn(0, 0)", 'expected': Number(1) },
        { 'test': r"sp_ellipj_dn(-1, 0)", 'expected': Number(1) },
        { 'test': r"sp_ellipj_ph(0.5, 0.5)", 'expected': Number(4414799500125129, 9007199254740992) },
        { 'test': r"sp_ellipk(0.5)", 'expected': Number(8350010025811531, 4503599627370496) },
        { 'test': r"sp_ellipkm1(0.5)", 'expected': Number(8350010025811531, 4503599627370496) },
        { 'test': r"sp_ellipkinc(1, -1)", 'expected': Number(4036998736202319, 4503599627370496) },
        { 'test': r"sp_ellipe(1)", 'expected': Number(1) },
        { 'test': r"sp_ellipeinc(1, 1)", 'expected': Number(3789648413623927, 4503599627370496) },
        { 'test': r"sp_elliprc(0, -1)", 'expected': Number(0) },
        { 'test': r"sp_elliprd(0, 1, 0.5)", 'expected': Number(5723262799472359, 1125899906842624) },
        { 'test': r"sp_elliprf(1, 0, 0.5)", 'expected': Number(4175005012905765, 2251799813685248) },
        { 'test': r"sp_elliprg(0, 1, 0)", 'expected': Number(1, 2) },
        { 'test': r"sp_elliprj(0.5, 0.5, 0, 1)", 'expected': Number(8790735661025811, 2251799813685248) },
        { 'test': r"sp_jv(-1, 0.5)", 'expected': Number(-8728641085665495, 36028797018963968) },
        { 'test': r"sp_jve(0.5, 0.5)", 'expected': Number(609082339691587, 1125899906842624) },
        { 'test': r"sp_yn(1, 1)", 'expected': Number(-7036539541810069, 9007199254740992) },
        { 'test': r"sp_yv(-1, 1)", 'expected': Number(3518269770905035, 4503599627370496) },
        { 'test': r"sp_yve(1, 0.5)", 'expected': Number(-207091328728615, 140737488355328) },
        { 'test': r"sp_kn(0.5, 1)", 'expected': Number(3792251006349453, 9007199254740992) },
        { 'test': r"sp_kv(1, 0.5)", 'expected': Number(233123362837751, 140737488355328) },
        { 'test': r"sp_kve(-1, 1)", 'expected': Number(7368580231056147, 4503599627370496) },
        { 'test': r"sp_iv(1, 0.5)", 'expected': Number(4645810790637655, 18014398509481984) },
        { 'test': r"sp_ive(0.5, 1)", 'expected': Number(6214090434752255, 18014398509481984) },
        { 'test': r"sp_hankel1(0.5, -1)", 'expected': Number(-970748350683701, 2251799813685248) },
        { 'test': r"sp_hankel1e(-1, -1)", 'expected': Number(7558978089995349, 18014398509481984) },
        { 'test': r"sp_hankel2(0.5, 1)", 'expected': Number(3023701960101603, 4503599627370496) },
        { 'test': r"sp_hankel2e(-1, -1)", 'expected': Number(6172854148276737, 4503599627370496) },
        { 'test': r"sp_wright_bessel(0.5, 0.5, 0)", 'expected': Number(5081767996463981, 9007199254740992) },
        { 'test': r"sp_itj0y0_ij0(0.5)", 'expected': Number(4410649894523449, 9007199254740992) },
        { 'test': r"sp_itj0y0_iy0(0.5)", 'expected': Number(-632525451478903, 1125899906842624) },
        { 'test': r"sp_it2j0y0_ij0(0.5)", 'expected': Number(2234288834813827, 72057594037927936) },
        { 'test': r"sp_it2j0y0_iy0(0.5)", 'expected': Number(303642300496403, 1125899906842624) },
        { 'test': r"sp_iti0k0_ii0(-1)", 'expected': Number(-4893256007685619, 4503599627370496) },
        { 'test': r"sp_iti0k0_ik0(0)", 'expected': Number(0) },
        { 'test': r"sp_it2i0k0_ii0(0)", 'expected': Number(0) },
        { 'test': r"sp_it2i0k0_ik0(1)", 'expected': Number(7512663177582047, 36028797018963968) },
        { 'test': r"sp_besselpoly(0.5, 1, 0.5)", 'expected': Number(2617555660695709, 9007199254740992) },
        { 'test': r"sp_jvp(1, -1)", 'expected': Number(5857329448248691, 18014398509481984) },
        { 'test': r"sp_yvp(0.5, 0.5)", 'expected': Number(6896000336035715, 4503599627370496) },
        { 'test': r"sp_ivp(-1, 1)", 'expected': Number(1578301742562423, 2251799813685248) },
        { 'test': r"sp_h1vp(0.5, 0.5)", 'expected': Number(8093366474012085, 18014398509481984) },
        { 'test': r"sp_h2vp(0.5, -1)", 'expected': Number(7988900621570613, 9007199254740992) },
        { 'test': r"sp_bdtrc(-1, 1, 0)", 'expected': Number(1) },
        { 'test': r"sp_bdtri(0.5, 1, 1)", 'expected': Number(-0) },
        { 'test': r"sp_bdtrik(0.5, 1, 0.5)", 'expected': Number(8424983333484575, 1684996666696914987166688442938726917102321526408785780068975640576) },
        { 'test': r"sp_bdtrin(0.5, 0, 1)", 'expected': Number(5) },
        { 'test': r"sp_btdtria(0.5, 0.5, 0.5)", 'expected': Number(562949953421311, 1125899906842624) },
        { 'test': r"sp_btdtrib(0.5, 1, 0.5)", 'expected': Number(8609176045055621, 4398046511104) },
        { 'test': r"sp_fdtr(1, 1, 0)", 'expected': Number(0) },
        { 'test': r"sp_fdtrc(1, 1, 0.5)", 'expected': Number(5477939427303175, 9007199254740992) },
        { 'test': r"sp_fdtri(1, 0.5, 0.5)", 'expected': Number(5436325649948133, 2251799813685248) },
        { 'test': r"sp_fdtridfd(1, 0.5, 0.5)", 'expected': Number(8815628355826041, 1125899906842624) },
        { 'test': r"sp_gdtr(1, 1, 0.5)", 'expected': Number(7088113497199595, 18014398509481984) },
        { 'test': r"sp_gdtrc(0, 1, 0.5)", 'expected': Number(1) },
        { 'test': r"sp_gdtria(0.5, 0.5, 1)", 'expected': Number(8195406022554285, 36028797018963968) },
        { 'test': r"sp_gdtrib(0.5, 0.5, 0.5)", 'expected': Number(4738108883810275, 9007199254740992) },
        { 'test': r"sp_gdtrix(0.5, 0.5, 0)", 'expected': Number(0) },
        { 'test': r"sp_nbdtr(1, 1, 0.5)", 'expected': Number(3, 4) },
        { 'test': r"sp_nbdtrc(0, 1, 1)", 'expected': Number(0) },
        { 'test': r"sp_nbdtri(0.5, 0, 1)", 'expected': Number(1) },
        { 'test': r"sp_nbdtrik(0.5, 1, 0)", 'expected': Number(0) },
        { 'test': r"sp_nbdtrin(0, 0.5, 0.5)", 'expected': Number(4503599627373503, 4503599627370496) },
        { 'test': r"sp_ncfdtr(1, 0.5, 0, 0)", 'expected': Number(0) },
        { 'test': r"sp_ncfdtridfd(1, 0, 1, 0.5)", 'expected': Number(492525077454931, 4925250774549309901534880012517951725634967408808180833493536675530715221437151326426783281860614455000000000000000) },
        { 'test': r"sp_ncfdtridfn(0.5, 1, 0.5, 1)", 'expected': Number(2149885661867029, 4503599627370496) },
        { 'test': r"sp_ncfdtri(1, 0.5, 0.5, 0.5)", 'expected': Number(8538045056297507, 2251799813685248) },
        { 'test': r"sp_ncfdtrinc(0.5, 1, 0.5, 1)", 'expected': Number(267039946906795, 562949953421312) },
        { 'test': r"sp_nctdtr(1, 0.5, 1)", 'expected': Number(166843655323183, 281474976710656) },
        { 'test': r"sp_nctdtridf(0.5, -1, 0.5)", 'expected': Number(492525077454931, 4925250774549309901534880012517951725634967408808180833493536675530715221437151326426783281860614455000000000000000) },
        { 'test': r"sp_nctdtrit(1, 1, 0.5)", 'expected': Number(1486427805088563, 1125899906842624) },
        { 'test': r"sp_nctdtrinc(1, 0, 1)", 'expected': Number(5805421365630173, 70368744177664) },
        { 'test': r"sp_nrdtrimn(0.5, 1, 1)", 'expected': Number(9007199254740991, 9007199254740992) },
        { 'test': r"sp_nrdtrisd(0, 0.5, 0.5)", 'expected': Number(7532401279578852) },
        { 'test': r"sp_ndtr(-1)", 'expected': Number(1429039484972163, 9007199254740992) },
        { 'test': r"sp_log_ndtr(0.5)", 'expected': Number(-6646347753654691, 18014398509481984) },
        { 'test': r"sp_ndtri(0.5)", 'expected': Number(0) },
        { 'test': r"sp_ndtri_exp(-1)", 'expected': Number(-6079408484221335, 18014398509481984) },
        { 'test': r"sp_pdtr(0, 0)", 'expected': Number(1) },
        { 'test': r"sp_pdtrc(1, 1)", 'expected': Number(4760144796066191, 18014398509481984) },
        { 'test': r"sp_pdtri(0, 0.5)", 'expected': Number(6243314768165361, 9007199254740992) },
        { 'test': r"sp_pdtrik(0, 0)", 'expected': Number(0) },
        { 'test': r"sp_stdtr(0.5, 0.5)", 'expected': Number(5596541863695039, 9007199254740992) },
        { 'test': r"sp_stdtridf(0.5, 0)", 'expected': Number(5) },
        { 'test': r"sp_stdtrit(1, 0.5)", 'expected': Number(12654164529, 154742504910672534362390528) },
        { 'test': r"sp_chdtr(0, 1)", 'expected': Number(1) },
        { 'test': r"sp_chdtrc(0.5, 0)", 'expected': Number(1) },
        { 'test': r"sp_chdtri(1, 1)", 'expected': Number(0) },
        { 'test': r"sp_chdtriv(0.5, 0.5)", 'expected': Number(4738108883698157, 4503599627370496) },
        { 'test': r"sp_chndtr(1, 0.5, 1)", 'expected': Number(5440765753244637, 9007199254740992) },
        { 'test': r"sp_chndtridf(0, 0.5, 1)", 'expected': Number(6032057205060441, 6032057205060440848842124543157735677050252251748505781796615064961622344493727293370973578138265744000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) },
        { 'test': r"sp_chndtrinc(0.5, 1, 0)", 'expected': Number(3474456743598437, 8796093022208) },
        { 'test': r"sp_chndtrix(0.5, 1, 0)", 'expected': Number(8195406022554293, 18014398509481984) },
        { 'test': r"sp_smirnov(1, 0.5)", 'expected': Number(1, 2) },
        { 'test': r"sp_smirnovi(1, 0)", 'expected': Number(1) },
        { 'test': r"sp_kolmogorov(0.5)", 'expected': Number(8682446880349387, 9007199254740992) },
        { 'test': r"sp_kolmogi(1)", 'expected': Number(0) },
        { 'test': r"sp_boxcox(0.5, -1)", 'expected': Number(-1) },
        { 'test': r"sp_boxcox1p(-1, 0.5)", 'expected': Number(-2) },
        { 'test': r"sp_inv_boxcox(0, 0)", 'expected': Number(1) },
        { 'test': r"sp_inv_boxcox1p(-1, 1)", 'expected': Number(-1) },
        { 'test': r"sp_logit(0.5)", 'expected': Number(0) },
        { 'test': r"sp_expit(-1)", 'expected': Number(2422408970132803, 9007199254740992) },
        { 'test': r"sp_log_expit(-1)", 'expected': Number(-5914404846547017, 4503599627370496) },
        { 'test': r"sp_tklmbda(0, 0.5)", 'expected': Number(1, 2) },
        { 'test': r"sp_owens_t(-1, 0)", 'expected': Number(0) },
        { 'test': r"sp_entr(0)", 'expected': Number(0) },
        { 'test': r"sp_rel_entr(0.5, 0.5)", 'expected': Number(0) },
        { 'test': r"sp_kl_div(0, 0.5)", 'expected': Number(1, 2) },
        { 'test': r"sp_huber(1, 0.5)", 'expected': Number(1, 8) },
        { 'test': r"sp_pseudo_huber(0.5, -1)", 'expected': Number(347922205179541, 1125899906842624) },
        { 'test': r"sp_gamma(0.5)", 'expected': Number(3991211251234741, 2251799813685248) },
        { 'test': r"sp_gammaln(0.5)", 'expected': Number(1288851271837807, 2251799813685248) },
        { 'test': r"sp_loggamma(1)", 'expected': Number(0) },
        { 'test': r"sp_gammasgn(-1)", 'expected': Number(0) },
        { 'test': r"sp_gammainc(1, 1)", 'expected': Number(1423408956596761, 2251799813685248) },
        { 'test': r"sp_gammaincinv(0.5, 0)", 'expected': Number(0) },
        { 'test': r"sp_gammaincc(1, 0.5)", 'expected': Number(2731571253070597, 4503599627370496) },
        { 'test': r"sp_gammainccinv(1, 0.5)", 'expected': Number(6243314768165361, 9007199254740992) },
        { 'test': r"sp_beta(-1, 1)", 'expected': Number(-1) },
        { 'test': r"sp_betaln(1, -1)", 'expected': Number(0) },
        { 'test': r"sp_betainc(1, 0.5, 0)", 'expected': Number(0) },
        { 'test': r"sp_betaincc(1, 1, 0.5)", 'expected': Number(1, 2) },
        { 'test': r"sp_betaincinv(0.5, 1, 1)", 'expected': Number(1) },
        { 'test': r"sp_betainccinv(0.5, 0.5, 0.5)", 'expected': Number(4503599627370495, 9007199254740992) },
        { 'test': r"sp_psi(0.5)", 'expected': Number(-2210715755382079, 1125899906842624) },
        { 'test': r"sp_rgamma(0)", 'expected': Number(0) },
        { 'test': r"sp_polygamma(0, 0.5)", 'expected': Number(-2210715755382079, 1125899906842624) },
        { 'test': r"sp_digamma(1)", 'expected': Number(-5199096506725913, 9007199254740992) },
        { 'test': r"sp_poch(0.5, 1)", 'expected': Number(1, 2) },
        { 'test': r"sp_lpmv(1, 1, 0.5)", 'expected': Number(-3900231685776981, 4503599627370496) },
        { 'test': r"sp_sph_harm(-1, 1, 1, 0)", 'expected': Number(0) },
        { 'test': r"sp_hyp2f1(0.5, 0, 0.5, 0.5)", 'expected': Number(1) },
        { 'test': r"sp_hyp1f1(0.5, 0.5, 1)", 'expected': Number(6121026514868073, 2251799813685248) },
        { 'test': r"sp_hyperu(-1, 0.5, 0)", 'expected': Number(-1, 2) },
        { 'test': r"sp_hyp0f1(0.5, 0.5)", 'expected': Number(2452416663471727, 1125899906842624) },
        { 'test': r"sp_pbdv_d(0.5, 0.5)", 'expected': Number(1807523718038285, 2251799813685248) },
        { 'test': r"sp_pbdv_dp(-1, 0.5)", 'expected': Number(-6607645418961219, 9007199254740992) },
        { 'test': r"sp_pbvv_v(0, -1)", 'expected': Number(-6688191959933723, 9007199254740992) },
        { 'test': r"sp_pbvv_vp(1, -1)", 'expected': Number(-7958052063248043, 9007199254740992) },
        { 'test': r"sp_pbwa_w(-1, 0)", 'expected': Number(6588595930915767, 9007199254740992) },
        { 'test': r"sp_pbwa_wp(0.5, -1)", 'expected': Number(-602877902575847, 562949953421312) },
        { 'test': r"sp_mathieu_a(1, -1)", 'expected': Number(-248258265561819, 2251799813685248) },
        { 'test': r"sp_mathieu_b(1, 1)", 'expected': Number(-248258265561819, 2251799813685248) },
        { 'test': r"sp_kelvin_be(0.5)", 'expected': Number(4499201700163521, 4503599627370496) },
        { 'test': r"sp_kelvin_ke(1)", 'expected': Number(5164839899174607, 18014398509481984) },
        { 'test': r"sp_kelvin_bep(0)", 'expected': Number(0) },
        { 'test': r"sp_kelvin_kep(0.5)", 'expected': Number(-8195649490928951, 4503599627370496) },
        { 'test': r"sp_ber(1)", 'expected': Number(8866522846123127, 9007199254740992) },
        { 'test': r"sp_bei(0)", 'expected': Number(0) },
        { 'test': r"sp_berp(-1)", 'expected': Number(8999381319819333, 144115188075855872) },
        { 'test': r"sp_beip(-1)", 'expected': Number(-4480149487406215, 9007199254740992) },
        { 'test': r"sp_ker(1)", 'expected': Number(5164839899174607, 18014398509481984) },
        { 'test': r"sp_kei(0.5)", 'expected': Number(-6049070143551679, 9007199254740992) },
        { 'test': r"sp_kerp(1)", 'expected': Number(-6256435650262335, 9007199254740992) },
        { 'test': r"sp_keip(0.5)", 'expected': Number(6002465886812771, 18014398509481984) },
        { 'test': r"sp_lambertw(1)", 'expected': Number(5108372622710359, 9007199254740992) },
        { 'test': r"sp_wrightomega(0)", 'expected': Number(5108372622710359, 9007199254740992) },
        { 'test': r"sp_agm(0, -1)", 'expected': Number(0) },
        { 'test': r"sp_expn(0, 1)", 'expected': Number(828390857088487, 2251799813685248) },
        { 'test': r"sp_exp1(0.5)", 'expected': Number(2520996152845761, 4503599627370496) },
        { 'test': r"sp_expi(1)", 'expected': Number(8534851891563785, 4503599627370496) },
        { 'test': r"sp_shichi_si(0)", 'expected': Number(0) },
        { 'test': r"sp_shichi_ci(1)", 'expected': Number(3773417243184523, 4503599627370496) },
        { 'test': r"sp_sici_si(0)", 'expected': Number(0) },
        { 'test': r"sp_sici_ci(-1)", 'expected': Number(6078128725800575, 18014398509481984) },
        { 'test': r"sp_zeta(-1)", 'expected': Number(-6004799503160665, 72057594037927936) },
        { 'test': r"sp_zetac(0.5)", 'expected': Number(-5540225824537087, 2251799813685248) },

        #{ 'test': r"1l / 10cm", 'expected': (Number('100'), 'centimeters^2') },
        #{ 'test': r"(1l) / (10cm °C)", 'expected': (Number('100'), 'centimeters^2/Celsius') },
        #{ 'test': r"10km / 1l", 'expected': (Number('10'), 'millimeters^-2') },
        #{ 'test': r"1 / (10cm / 1l)", 'expected': (Number('100'), 'centimeters^2') },

    #    { 'test': r"", 'expected': Number('') },
    ]

    def setUp(self):
        self.c = ModularCalculator('Scientific')


TestScientificCalculator.prepare_tests()

if __name__ == '__main__':
    execute_tests()
