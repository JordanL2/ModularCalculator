#!/usr/bin/python3

if __name__ == '__main__':
    from tests.testrunner import *
else:
    from testrunner import *
from modularcalculator.modularcalculator import *
from modularcalculator.services.syntaxhighlighter import *
from modularcalculator.objects.exceptions import *
from modularcalculator.objects.number import *


class TestNumericalSpecialFunctions(CalculatorTestCase):

    c = ModularCalculator('Computing')
    tests = [
        { 'test': r"sp_airy_ai(1)", 'expected': Number(609302875692747, 4503599627370496) },
        { 'test': r"sp_airy_aip(0)", 'expected': Number(-4662475881910155, 18014398509481984) },
        { 'test': r"sp_airy_bi(-1)", 'expected': Number(3746900836687555, 36028797018963968) },
        { 'test': r"sp_airy_bip(0)", 'expected': Number(8075645116532897, 18014398509481984) },
        { 'test': r"sp_airye_eai(0.5)", 'expected': Number(5283211618295633, 18014398509481984) },
        { 'test': r"sp_airye_eaip(0)", 'expected': Number(-4662475881910155, 18014398509481984) },
        { 'test': r"sp_airye_ebi(0.5)", 'expected': Number(6078890422431057, 9007199254740992) },
        { 'test': r"sp_airye_ebip(-1)", 'expected': Number(5335645300842103, 9007199254740992) },
        { 'test': r"sp_itairy_apt(0.5)", 'expected': Number(328657625373571, 2251799813685248) },
        { 'test': r"sp_itairy_bpt(0)", 'expected': Number(0) },
        { 'test': r"sp_itairy_ant(0.5)", 'expected': Number(3761578406806851, 18014398509481984) },
        { 'test': r"sp_itairy_bnt(1)", 'expected': Number(6719460474640989, 18014398509481984) },
        { 'test': r"sp_ellipj_sn(-1, 1)", 'expected': Number(-1714957578484965, 2251799813685248) },
        { 'test': r"sp_ellipj_cn(0, 0)", 'expected': Number(1) },
        { 'test': r"sp_ellipj_dn(-1, 0)", 'expected': Number(1) },
        { 'test': r"sp_ellipj_ph(0.5, 0.5)", 'expected': Number(4414799500125129, 9007199254740992) },
        { 'test': r"sp_ellipk(0.5)", 'expected': Number(8350010025811531, 4503599627370496) },
        { 'test': r"sp_ellipkm1(0.5)", 'expected': Number(8350010025811531, 4503599627370496) },
        { 'test': r"sp_ellipkinc(1, -1)", 'expected': Number(4036998736202319, 4503599627370496) },
        { 'test': r"sp_ellipe(1)", 'expected': Number(1) },
        { 'test': r"sp_ellipeinc(1, 1)", 'expected': Number(3789648413623927, 4503599627370496) },
        { 'test': r"sp_elliprc(0, -1)", 'expected': Number(0) },
        { 'test': r"sp_elliprd(0, 1, 0.5)", 'expected': Number(5723262799472359, 1125899906842624) },
        { 'test': r"sp_elliprf(1, 0, 0.5)", 'expected': Number(4175005012905765, 2251799813685248) },
        { 'test': r"sp_elliprg(0, 1, 0)", 'expected': Number(1, 2) },
        { 'test': r"sp_elliprj(0.5, 0.5, 0, 1)", 'expected': Number(8790735661025811, 2251799813685248) },
        { 'test': r"sp_jv(-1, 0.5)", 'expected': Number(-8728641085665495, 36028797018963968) },
        { 'test': r"sp_jve(0.5, 0.5)", 'expected': Number(609082339691587, 1125899906842624) },
        { 'test': r"sp_yn(1, 1)", 'expected': Number(-7036539541810069, 9007199254740992) },
        { 'test': r"sp_yv(-1, 1)", 'expected': Number(3518269770905035, 4503599627370496) },
        { 'test': r"sp_yve(1, 0.5)", 'expected': Number(-207091328728615, 140737488355328) },
        { 'test': r"sp_kn(0.5, 1)", 'expected': Number(3792251006349453, 9007199254740992) },
        { 'test': r"sp_kv(1, 0.5)", 'expected': Number(233123362837751, 140737488355328) },
        { 'test': r"sp_kve(-1, 1)", 'expected': Number(7368580231056147, 4503599627370496) },
        { 'test': r"sp_iv(1, 0.5)", 'expected': Number(4645810790637655, 18014398509481984) },
        { 'test': r"sp_ive(0.5, 1)", 'expected': Number(6214090434752255, 18014398509481984) },
        { 'test': r"sp_hankel1(0.5, -1)", 'expected': Number(-970748350683701, 2251799813685248) },
        { 'test': r"sp_hankel1e(-1, -1)", 'expected': Number(7558978089995349, 18014398509481984) },
        { 'test': r"sp_hankel2(0.5, 1)", 'expected': Number(3023701960101603, 4503599627370496) },
        { 'test': r"sp_hankel2e(-1, -1)", 'expected': Number(6172854148276737, 4503599627370496) },
        { 'test': r"sp_wright_bessel(0.5, 0.5, 0)", 'expected': Number(5081767996463981, 9007199254740992) },
        { 'test': r"sp_itj0y0_ij0(0.5)", 'expected': Number(4410649894523449, 9007199254740992) },
        { 'test': r"sp_itj0y0_iy0(0.5)", 'expected': Number(-632525451478903, 1125899906842624) },
        { 'test': r"sp_it2j0y0_ij0(0.5)", 'expected': Number(2234288834813827, 72057594037927936) },
        { 'test': r"sp_it2j0y0_iy0(0.5)", 'expected': Number(303642300496403, 1125899906842624) },
        { 'test': r"sp_iti0k0_ii0(-1)", 'expected': Number(-4893256007685619, 4503599627370496) },
        { 'test': r"sp_iti0k0_ik0(0)", 'expected': Number(0) },
        { 'test': r"sp_it2i0k0_ii0(0)", 'expected': Number(0) },
        { 'test': r"sp_it2i0k0_ik0(1)", 'expected': Number(7512663177582047, 36028797018963968) },
        { 'test': r"sp_besselpoly(0.5, 1, 0.5)", 'expected': Number(2617555660695709, 9007199254740992) },
        { 'test': r"sp_jvp(1, -1)", 'expected': Number(5857329448248691, 18014398509481984) },
        { 'test': r"sp_yvp(0.5, 0.5)", 'expected': Number(6896000336035715, 4503599627370496) },
        { 'test': r"sp_ivp(-1, 1)", 'expected': Number(1578301742562423, 2251799813685248) },
        { 'test': r"sp_h1vp(0.5, 0.5)", 'expected': Number(8093366474012085, 18014398509481984) },
        { 'test': r"sp_h2vp(0.5, -1)", 'expected': Number(7988900621570613, 9007199254740992) },
        { 'test': r"sp_bdtrc(-1, 1, 0)", 'expected': Number(1) },
        { 'test': r"sp_bdtri(0.5, 1, 1)", 'expected': Number(-0) },
        { 'test': r"sp_bdtrik(0.5, 1, 0.5)", 'expected': Number(8424983333484575, 1684996666696914987166688442938726917102321526408785780068975640576) },
        { 'test': r"sp_bdtrin(0.5, 0, 1)", 'expected': Number(5) },
        { 'test': r"sp_btdtria(0.5, 0.5, 0.5)", 'expected': Number(562949953421311, 1125899906842624) },
        { 'test': r"sp_btdtrib(0.5, 1, 0.5)", 'expected': Number(8609176045055621, 4398046511104) },
        { 'test': r"sp_fdtr(1, 1, 0)", 'expected': Number(0) },
        { 'test': r"sp_fdtrc(1, 1, 0.5)", 'expected': Number(5477939427303175, 9007199254740992) },
        { 'test': r"sp_fdtri(1, 0.5, 0.5)", 'expected': Number(5436325649948133, 2251799813685248) },
        { 'test': r"sp_fdtridfd(1, 0.5, 0.5)", 'expected': Number(8815628355826041, 1125899906842624) },
        { 'test': r"sp_gdtr(1, 1, 0.5)", 'expected': Number(7088113497199595, 18014398509481984) },
        { 'test': r"sp_gdtrc(0, 1, 0.5)", 'expected': Number(1) },
        { 'test': r"sp_gdtria(0.5, 0.5, 1)", 'expected': Number(8195406022554285, 36028797018963968) },
        { 'test': r"sp_gdtrib(0.5, 0.5, 0.5)", 'expected': Number(4738108883810275, 9007199254740992) },
        { 'test': r"sp_gdtrix(0.5, 0.5, 0)", 'expected': Number(0) },
        { 'test': r"sp_nbdtr(1, 1, 0.5)", 'expected': Number(3, 4) },
        { 'test': r"sp_nbdtrc(0, 1, 1)", 'expected': Number(0) },
        { 'test': r"sp_nbdtri(0.5, 0, 1)", 'expected': Number(1) },
        { 'test': r"sp_nbdtrik(0.5, 1, 0)", 'expected': Number(0) },
        { 'test': r"sp_nbdtrin(0, 0.5, 0.5)", 'expected': Number(4503599627373503, 4503599627370496) },
        { 'test': r"sp_ncfdtr(1, 0.5, 0, 0)", 'expected': Number(0) },
        { 'test': r"sp_ncfdtridfd(1, 0, 1, 0.5)", 'expected': Number(492525077454931, 4925250774549309901534880012517951725634967408808180833493536675530715221437151326426783281860614455000000000000000) },
        { 'test': r"sp_ncfdtridfn(0.5, 1, 0.5, 1)", 'expected': Number(2149885661867029, 4503599627370496) },
        { 'test': r"sp_ncfdtri(1, 0.5, 0.5, 0.5)", 'expected': Number(8538045056297507, 2251799813685248) },
        { 'test': r"sp_ncfdtrinc(0.5, 1, 0.5, 1)", 'expected': Number(267039946906795, 562949953421312) },
        { 'test': r"sp_nctdtr(1, 0.5, 1)", 'expected': Number(166843655323183, 281474976710656) },
        { 'test': r"sp_nctdtridf(0.5, -1, 0.5)", 'expected': Number('-10000000000000000159028911097599180468360808563945281389781327557747838772170381060813469985856815104') },
        { 'test': r"sp_nctdtrit(1, 1, 0.5)", 'expected': Number(1486427805088563, 1125899906842624) },
        { 'test': r"sp_nctdtrinc(1, 0, 1)", 'expected': Number(5805421365630173, 70368744177664) },
        { 'test': r"sp_nrdtrimn(0.5, 1, 1)", 'expected': Number(9007199254740991, 9007199254740992) },
        { 'test': r"sp_nrdtrisd(0, 0.5, 0.5)", 'expected': Number(7532401279578852) },
        { 'test': r"sp_ndtr(-1)", 'expected': Number(1429039484972163, 9007199254740992) },
        { 'test': r"sp_log_ndtr(0.5)", 'expected': Number(-6646347753654691, 18014398509481984) },
        { 'test': r"sp_ndtri(0.5)", 'expected': Number(0) },
        { 'test': r"sp_ndtri_exp(-1)", 'expected': Number(-6079408484221335, 18014398509481984) },
        { 'test': r"sp_pdtr(0, 0)", 'expected': Number(1) },
        { 'test': r"sp_pdtrc(1, 1)", 'expected': Number(4760144796066191, 18014398509481984) },
        { 'test': r"sp_pdtri(0, 0.5)", 'expected': Number(6243314768165361, 9007199254740992) },
        { 'test': r"sp_pdtrik(0, 0)", 'expected': Number(0) },
        { 'test': r"sp_stdtr(0.5, 0.5)", 'expected': Number(5596541863695039, 9007199254740992) },
        { 'test': r"sp_stdtridf(0.5, 0)", 'expected': Number(5) },
        { 'test': r"sp_stdtrit(1, 0.5)", 'expected': Number(12654164529, 154742504910672534362390528) },
        { 'test': r"sp_chdtr(0, 1)", 'expected': Number(1) },
        { 'test': r"sp_chdtrc(0.5, 0)", 'expected': Number(1) },
        { 'test': r"sp_chdtri(1, 1)", 'expected': Number(0) },
        { 'test': r"sp_chdtriv(0.5, 0.5)", 'expected': Number(4738108883698157, 4503599627370496) },
        { 'test': r"sp_chndtr(1, 0.5, 1)", 'expected': Number(5440765753244637, 9007199254740992) },
        { 'test': r"sp_chndtridf(0, 0.5, 1)", 'expected': Number(6032057205060441, 6032057205060440848842124543157735677050252251748505781796615064961622344493727293370973578138265744000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) },
        { 'test': r"sp_chndtrinc(0.5, 1, 0)", 'expected': Number(3474456743598437, 8796093022208) },
        { 'test': r"sp_chndtrix(0.5, 1, 0)", 'expected': Number(8195406022554293, 18014398509481984) },
        { 'test': r"sp_smirnov(1, 0.5)", 'expected': Number(1, 2) },
        { 'test': r"sp_smirnovi(1, 0)", 'expected': Number(1) },
        { 'test': r"sp_kolmogorov(0.5)", 'expected': Number(8682446880349387, 9007199254740992) },
        { 'test': r"sp_kolmogi(1)", 'expected': Number(0) },
        { 'test': r"sp_boxcox(0.5, -1)", 'expected': Number(-1) },
        { 'test': r"sp_boxcox1p(-1, 0.5)", 'expected': Number(-2) },
        { 'test': r"sp_inv_boxcox(0, 0)", 'expected': Number(1) },
        { 'test': r"sp_inv_boxcox1p(-1, 1)", 'expected': Number(-1) },
        { 'test': r"sp_logit(0.5)", 'expected': Number(0) },
        { 'test': r"sp_expit(-1)", 'expected': Number(2422408970132803, 9007199254740992) },
        { 'test': r"sp_log_expit(-1)", 'expected': Number(-5914404846547017, 4503599627370496) },
        { 'test': r"sp_tklmbda(0, 0.5)", 'expected': Number(1, 2) },
        { 'test': r"sp_owens_t(-1, 0)", 'expected': Number(0) },
        { 'test': r"sp_entr(0)", 'expected': Number(0) },
        { 'test': r"sp_rel_entr(0.5, 0.5)", 'expected': Number(0) },
        { 'test': r"sp_kl_div(0, 0.5)", 'expected': Number(1, 2) },
        { 'test': r"sp_huber(1, 0.5)", 'expected': Number(1, 8) },
        { 'test': r"sp_pseudo_huber(0.5, -1)", 'expected': Number('5566755282872655', '18014398509481984') },
        { 'test': r"sp_gamma(0.5)", 'expected': Number(3991211251234741, 2251799813685248) },
        { 'test': r"sp_gammaln(0.5)", 'expected': Number(1288851271837807, 2251799813685248) },
        { 'test': r"sp_loggamma(1)", 'expected': Number(0) },
        { 'test': r"sp_gammasgn(-1)", 'expected': Number(0) },
        { 'test': r"sp_gammainc(1, 1)", 'expected': Number(1423408956596761, 2251799813685248) },
        { 'test': r"sp_gammaincinv(0.5, 0)", 'expected': Number(0) },
        { 'test': r"sp_gammaincc(1, 0.5)", 'expected': Number(2731571253070597, 4503599627370496) },
        { 'test': r"sp_gammainccinv(1, 0.5)", 'expected': Number(6243314768165361, 9007199254740992) },
        { 'test': r"sp_beta(-1, 1)", 'expected': Number(-1) },
        { 'test': r"sp_betaln(1, -1)", 'expected': Number(0) },
        { 'test': r"sp_betainc(1, 0.5, 0)", 'expected': Number(0) },
        { 'test': r"sp_betaincc(1, 1, 0.5)", 'expected': Number(1, 2) },
        { 'test': r"sp_betaincinv(0.5, 1, 1)", 'expected': Number(1) },
        { 'test': r"sp_betainccinv(0.5, 0.5, 0.5)", 'expected': Number(4503599627370495, 9007199254740992) },
        { 'test': r"sp_psi(0.5)", 'expected': Number(-2210715755382079, 1125899906842624) },
        { 'test': r"sp_rgamma(0)", 'expected': Number(0) },
        { 'test': r"sp_polygamma(0, 0.5)", 'expected': Number(-2210715755382079, 1125899906842624) },
        { 'test': r"sp_digamma(1)", 'expected': Number(-5199096506725913, 9007199254740992) },
        { 'test': r"sp_poch(0.5, 1)", 'expected': Number(1, 2) },
        { 'test': r"sp_lpmv(1, 1, 0.5)", 'expected': Number(-3900231685776981, 4503599627370496) },
        { 'test': r"sp_sph_harm(-1, 1, 1, 0)", 'expected': Number(0) },
        { 'test': r"sp_hyp2f1(0.5, 0, 0.5, 0.5)", 'expected': Number(1) },
        { 'test': r"sp_hyp1f1(0.5, 0.5, 1)", 'expected': Number(6121026514868073, 2251799813685248) },
        { 'test': r"sp_hyperu(-1, 0.5, 0)", 'expected': Number(-1, 2) },
        { 'test': r"sp_hyp0f1(0.5, 0.5)", 'expected': Number('1226208331735863', '562949953421312') },
        { 'test': r"sp_pbdv_d(0.5, 0.5)", 'expected': Number(1807523718038285, 2251799813685248) },
        { 'test': r"sp_pbdv_dp(-1, 0.5)", 'expected': Number(-6607645418961219, 9007199254740992) },
        { 'test': r"sp_pbvv_v(0, -1)", 'expected': Number(-6688191959933723, 9007199254740992) },
        { 'test': r"sp_pbvv_vp(1, -1)", 'expected': Number(-7958052063248043, 9007199254740992) },
        { 'test': r"sp_pbwa_w(-1, 0)", 'expected': Number(6588595930915767, 9007199254740992) },
        { 'test': r"sp_pbwa_wp(0.5, -1)", 'expected': Number(-602877902575847, 562949953421312) },
        { 'test': r"sp_mathieu_a(1, -1)", 'expected': Number(-248258265561819, 2251799813685248) },
        { 'test': r"sp_mathieu_b(1, 1)", 'expected': Number(-248258265561819, 2251799813685248) },
        { 'test': r"sp_kelvin_be(0.5)", 'expected': Number(4499201700163521, 4503599627370496) },
        { 'test': r"sp_kelvin_ke(1)", 'expected': Number(5164839899174607, 18014398509481984) },
        { 'test': r"sp_kelvin_bep(0)", 'expected': Number(0) },
        { 'test': r"sp_kelvin_kep(0.5)", 'expected': Number(-8195649490928951, 4503599627370496) },
        { 'test': r"sp_ber(1)", 'expected': Number(8866522846123127, 9007199254740992) },
        { 'test': r"sp_bei(0)", 'expected': Number(0) },
        { 'test': r"sp_berp(-1)", 'expected': Number(8999381319819333, 144115188075855872) },
        { 'test': r"sp_beip(-1)", 'expected': Number(-4480149487406215, 9007199254740992) },
        { 'test': r"sp_ker(1)", 'expected': Number(5164839899174607, 18014398509481984) },
        { 'test': r"sp_kei(0.5)", 'expected': Number(-6049070143551679, 9007199254740992) },
        { 'test': r"sp_kerp(1)", 'expected': Number(-6256435650262335, 9007199254740992) },
        { 'test': r"sp_keip(0.5)", 'expected': Number(6002465886812771, 18014398509481984) },
        { 'test': r"sp_lambertw(1)", 'expected': Number(5108372622710359, 9007199254740992) },
        { 'test': r"sp_wrightomega(0)", 'expected': Number(5108372622710359, 9007199254740992) },
        { 'test': r"sp_agm(0, -1)", 'expected': Number(0) },
        { 'test': r"sp_expn(0, 1)", 'expected': Number(828390857088487, 2251799813685248) },
        { 'test': r"sp_exp1(0.5)", 'expected': Number(2520996152845761, 4503599627370496) },
        { 'test': r"sp_expi(1)", 'expected': Number(8534851891563785, 4503599627370496) },
        { 'test': r"sp_shichi_si(0)", 'expected': Number(0) },
        { 'test': r"sp_shichi_ci(1)", 'expected': Number(3773417243184523, 4503599627370496) },
        { 'test': r"sp_sici_si(0)", 'expected': Number(0) },
        { 'test': r"sp_sici_ci(-1)", 'expected': Number(6078128725800575, 18014398509481984) },
        { 'test': r"sp_zeta(-1)", 'expected': Number(-6004799503160665, 72057594037927936) },
        { 'test': r"sp_zetac(0.5)", 'expected': Number(-5540225824537087, 2251799813685248) },
    ]

    def category(self):
        return 'Computing'

    def setUp(self):
        self.c = ModularCalculator('Computing')


TestNumericalSpecialFunctions.prepare_tests()

if __name__ == '__main__':
    execute_tests()
